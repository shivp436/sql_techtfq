/*
-- TABLE STRUCTURE:
DROP TABLE IF EXISTS TECHTFQ.COMP_Q10;
CREATE TABLE TECHTFQ.COMP_Q10 (
	INPUT NVARCHAR(5)
	)

DECLARE @N INT = 21;
DECLARE @I INT = 1;

WHILE @I <= @N 
BEGIN
	INSERT INTO TECHTFQ.COMP_Q10 (INPUT)
	VALUES (@I);
	SET @I = @I+1;
END;

SELECT * FROM TECHTFQ.COMP_Q10;
*/

--------------------------------
-- SOLUTION1: USING RECURSION
--------------------------------

-- ADD INDEXING
WITH CTE_RN AS (
SELECT
	INPUT
	, ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS RN
FROM TECHTFQ.COMP_Q10)

, CTE_CNT AS (
    SELECT COUNT(*) AS CNT FROM CTE_RN
)

-- SET BOUNDARIES FOR EACH ROW
, REC_CTE AS  (
SELECT 
	1 AS TRIANGLE_ROW
	, 1 AS START_IND
	, 1 AS END_IND
UNION ALL
SELECT
	TRIANGLE_ROW+1
	, END_IND + 1
	, TRIANGLE_ROW + END_IND + 1
FROM REC_CTE
WHERE END_IND < (SELECT CNT FROM CTE_CNT)
)

-- ASSIGN ROW TO EACH RECORD BY INDEX
, CTE_ROWS AS (
SELECT
	N.INPUT, R.TRIANGLE_ROW
FROM CTE_RN AS N
LEFT JOIN REC_CTE AS R
	ON N.RN BETWEEN R.START_IND AND R.END_IND
	)

-- GROUP BY ROW
SELECT
	STRING_AGG(INPUT, ', ') AS TRIANGLE
FROM CTE_ROWS
GROUP BY TRIANGLE_ROW
ORDER BY TRIANGLE_ROW;

-------------
-- SOLUTION 2: USING LOOP
-------------

-- ADD INDEXING
DECLARE @Temp TABLE (
    RowNum INT IDENTITY(1,1),
    INPUT NVARCHAR(5)
);
INSERT INTO @Temp (INPUT)
SELECT INPUT FROM TECHTFQ.COMP_Q10;

-- TEMP VARS
DECLARE @LEN INT = (SELECT COUNT(*) FROM @Temp);
DECLARE @ROW INT = 1;
DECLARE @I INT = 1;
DECLARE @CURR_TEXT NVARCHAR(MAX);
DECLARE @CURR_IP NVARCHAR(5);

-- OUTER LOOP
WHILE @I <= @LEN
BEGIN
    SET @CURR_TEXT = '';
    
    -- ROW LOOP
    DECLARE @J INT = 1;
    WHILE @J <= @ROW AND @I <= @LEN
    BEGIN
        SELECT @CURR_IP = INPUT FROM @Temp WHERE RowNum = @I;
        SET @CURR_TEXT += IIF(@J = 1, @CURR_IP, CONCAT(', ', @CURR_IP));
        
        SET @I += 1;
        SET @J += 1;
    END

    PRINT @CURR_TEXT;
    SET @ROW += 1;
END